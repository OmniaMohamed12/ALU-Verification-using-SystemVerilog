===============================================================================
Module : alu
===============================================================================
SCORE  LINE   TOGGLE BRANCH 
 89.64  96.00  98.57  74.36 

Source File(s) : 

/home/ICer/omnia/iti/FINAL_ALU_PROJECT/alu.sv

Module self-instances :

SCORE  LINE   TOGGLE BRANCH NAME   
 89.64  96.00  98.57  74.36 tb.dut 



-------------------------------------------------------------------------------
Line Coverage for Module : alu

             Line No.   Total   Covered  Percent
TOTAL                       50       48    96.00
ALWAYS              7        2        2   100.00
ALWAYS             12       48       46    95.83

6                          always@(posedge alu_clk or negedge rst_n)begin
7          1/1                if( alu_irq_clr)begin
8          1/1                alu_irq<=1'b0;
9                           end
                        MISSING_ELSE
10                         end
11                        always@(posedge alu_clk or negedge rst_n)begin
12         1/1              if(!rst_n)begin
13         1/1                alu_irq<=1'b0;
14         1/1                alu_out<=8'b0;
15                          end
16                          else begin
17         1/1              if(alu_enable)begin
18         1/1                if(alu_enable_a)begin
19         1/1                  case(alu_op_a)
20                                2'b00:begin
21                                  assert (alu_in_b != 8'h00) else $error("illegal input alu_in_b != 8'h00");
22         1/1                      alu_out=alu_in_a & alu_in_b;
23         1/1                      if(alu_out==8'hff)
24         1/1                        alu_irq<=1'b1;
                   ==>  MISSING_ELSE
25         1/1                      if(alu_out==8'hff && alu_irq_clr==1'b1)
26         1/1                        alu_irq<=1'b1;
                        MISSING_ELSE
27                                 
28                                end
29                                2'b01:begin
30                                  assert (alu_in_a != 8'hff ) else $error("illegal input alu_in_a = 8'hff ");
31                                  assert (alu_in_b != 8'h03 ) else $error("illegal input alu_in_a = 8'hff ");
32         1/1                      alu_out=~(alu_in_a & alu_in_b);
33         1/1                      if(alu_out==8'h00)
34         0/1     ==>                alu_irq<=1'b1;
                        MISSING_ELSE
35         1/1                      if(alu_out==8'h00 && alu_irq_clr==1'b1)
36         0/1     ==>                alu_irq<=1'b1;
                        MISSING_ELSE
37                                end
38                                2'b10:begin
39         1/1                      alu_out=alu_in_a | alu_in_b;
40         1/1                      if(alu_out==8'hf8)
41         1/1                        alu_irq<=1'b1;
                   ==>  MISSING_ELSE
42         1/1                      if(alu_out==8'hf8 && alu_irq_clr==1'b1)
43         1/1                        alu_irq<=1'b1;
                        MISSING_ELSE
44                                end
45                                2'b11:begin
46         1/1                      alu_out=alu_in_a ^ alu_in_b;
47         1/1                      if(alu_out==8'h83)
48         1/1                        alu_irq<=1'b1;
                   ==>  MISSING_ELSE
49         1/1                      if(alu_out==8'h83 && alu_irq_clr==1'b1)
50         1/1                        alu_irq<=1'b1;
                        MISSING_ELSE
51                                end
                   ==>  MISSING_DEFAULT
52                              endcase
53                            end
54         1/1                 else if(alu_enable_b)begin
55         1/1                   case(alu_op_b)
56                                2'b00:begin
57         1/1                      alu_out=~(alu_in_a ^ alu_in_b);
58         1/1                      if(alu_out==8'hf1)
59         1/1                        alu_irq<=1'b1;
                   ==>  MISSING_ELSE
60         1/1                      if(alu_out==8'hf1 && alu_irq_clr==1'b1)
61         1/1                        alu_irq<=1'b1;
                        MISSING_ELSE
62                                end
63                                2'b01:begin
64                                  assert (alu_in_b != 8'h03 ) else $error("illegal input alu_in_b = 8'h03 ");
65         1/1                      alu_out=(alu_in_a & alu_in_b);
66         1/1                      if(alu_out==8'hf4)
67         1/1                        alu_irq<=1'b1;
                        MISSING_ELSE
68         1/1                      if(alu_out==8'hf4 && alu_irq_clr==1'b1)
69         1/1                        alu_irq<=1'b1;
                        MISSING_ELSE
70                                end
71                                2'b10:begin
72                                  assert (alu_in_a != 8'hf5 ) else $error("illegal input alu_in_a = 8'hf5 ");
73         1/1                      alu_out=~(alu_in_a | alu_in_b);
74         1/1                      if(alu_out==8'hf5)
75         1/1                        alu_irq<=1'b1;
                   ==>  MISSING_ELSE
76         1/1                      if(alu_out==8'hf5 && alu_irq_clr==1'b1)
77         1/1                        alu_irq<=1'b1;
                        MISSING_ELSE
78                                end
79                                2'b11:begin
80         1/1                      alu_out=alu_in_a | alu_in_b;
81         1/1                      if(alu_out==8'hff)
82         1/1                        alu_irq<=1'b1;
                        MISSING_ELSE
83         1/1                      if(alu_out==8'hff && alu_irq_clr==1'b1)
84         1/1                        alu_irq<=1'b1;
                        MISSING_ELSE
85                                end
                   ==>  MISSING_DEFAULT
86                              endcase
87                             end
                   ==>  MISSING_ELSE
88                          end
                        MISSING_ELSE

-------------------------------------------------------------------------------
Toggle Coverage for Module : alu
                Total Covered Percent 
Totals          12    11      91.67   
Total Bits      70    69      98.57   
Total Bits 0->1 35    35      100.00  
Total Bits 1->0 35    34      97.14   

                            
Ports          12 11 91.67  
Port Bits      70 69 98.57  
Port Bits 0->1 35 35 100.00 
Port Bits 1->0 35 34 97.14  

Port Details
              Toggle Toggle 1->0 Toggle 0->1 Direction 
alu_clk       Yes    Yes         Yes         INPUT     
rst_n         No     No          Yes         INPUT     
alu_irq_clr   Yes    Yes         Yes         INPUT     
alu_enable    Yes    Yes         Yes         INPUT     
alu_enable_a  Yes    Yes         Yes         INPUT     
alu_enable_b  Yes    Yes         Yes         INPUT     
alu_op_a[1:0] Yes    Yes         Yes         INPUT     
alu_op_b[1:0] Yes    Yes         Yes         INPUT     
alu_in_a[7:0] Yes    Yes         Yes         INPUT     
alu_in_b[7:0] Yes    Yes         Yes         INPUT     
alu_out[7:0]  Yes    Yes         Yes         OUTPUT    
alu_irq       Yes    Yes         Yes         OUTPUT    


-------------------------------------------------------------------------------
Branch Coverage for Module : alu
         Line No. Total Covered Percent 
Branches          39    29      74.36   
IF       7        2     2       100.00  
IF       12       37    27      72.97   


7                if( alu_irq_clr)begin
                 -1-  
8                alu_irq<=1'b0;
                 ==>
9              end
               MISSING_ELSE
               ==>

Branches:

-1- Status  
1   Covered 
0   Covered 


12             if(!rst_n)begin
               -1-  
13               alu_irq<=1'b0;
                 ==>
14               alu_out<=8'b0;
15             end
16             else begin
17             if(alu_enable)begin
               -2-  
18               if(alu_enable_a)begin
                 -3-  
19                 case(alu_op_a)
                   -4-  
20                   2'b00:begin
21                     assert (alu_in_b != 8'h00) else $error("illegal input alu_in_b != 8'h00");
22                     alu_out=alu_in_a & alu_in_b;
23                     if(alu_out==8'hff)
                       -5-  
24                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
25                     if(alu_out==8'hff && alu_irq_clr==1'b1)
                       -6-  
26                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
27                    
28                   end
29                   2'b01:begin
30                     assert (alu_in_a != 8'hff ) else $error("illegal input alu_in_a = 8'hff ");
31                     assert (alu_in_b != 8'h03 ) else $error("illegal input alu_in_a = 8'hff ");
32                     alu_out=~(alu_in_a & alu_in_b);
33                     if(alu_out==8'h00)
                       -7-  
34                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
35                     if(alu_out==8'h00 && alu_irq_clr==1'b1)
                       -8-  
36                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
37                   end
38                   2'b10:begin
39                     alu_out=alu_in_a | alu_in_b;
40                     if(alu_out==8'hf8)
                       -9-  
41                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
42                     if(alu_out==8'hf8 && alu_irq_clr==1'b1)
                       -10-  
43                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
44                   end
45                   2'b11:begin
46                     alu_out=alu_in_a ^ alu_in_b;
47                     if(alu_out==8'h83)
                       -11-  
48                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
49                     if(alu_out==8'h83 && alu_irq_clr==1'b1)
                       -12-  
50                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
51                   end
                     MISSING_DEFAULT
                     ==>
52                 endcase
53               end
54                else if(alu_enable_b)begin
                       -13-  
55                  case(alu_op_b)
                    -14-  
56                   2'b00:begin
57                     alu_out=~(alu_in_a ^ alu_in_b);
58                     if(alu_out==8'hf1)
                       -15-  
59                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
60                     if(alu_out==8'hf1 && alu_irq_clr==1'b1)
                       -16-  
61                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
62                   end
63                   2'b01:begin
64                     assert (alu_in_b != 8'h03 ) else $error("illegal input alu_in_b = 8'h03 ");
65                     alu_out=(alu_in_a & alu_in_b);
66                     if(alu_out==8'hf4)
                       -17-  
67                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
68                     if(alu_out==8'hf4 && alu_irq_clr==1'b1)
                       -18-  
69                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
70                   end
71                   2'b10:begin
72                     assert (alu_in_a != 8'hf5 ) else $error("illegal input alu_in_a = 8'hf5 ");
73                     alu_out=~(alu_in_a | alu_in_b);
74                     if(alu_out==8'hf5)
                       -19-  
75                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
76                     if(alu_out==8'hf5 && alu_irq_clr==1'b1)
                       -20-  
77                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
78                   end
79                   2'b11:begin
80                     alu_out=alu_in_a | alu_in_b;
81                     if(alu_out==8'hff)
                       -21-  
82                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
83                     if(alu_out==8'hff && alu_irq_clr==1'b1)
                       -22-  
84                       alu_irq<=1'b1;
                         ==>
                         MISSING_ELSE
                         ==>
85                   end
                     MISSING_DEFAULT
                     ==>
86                 endcase
87                end
                  MISSING_ELSE
                  ==>
88             end
               MISSING_ELSE
               ==>

Branches:

-1- -2- -3- -4-             -5- -6- -7- -8- -9- -10- -11- -12- -13- -14-            -15- -16- -17- -18- -19- -20- -21- -22- Status      
1   -   -   -               -   -   -   -   -   -    -    -    -    -               -    -    -    -    -    -    -    -    Covered     
0   1   1   2'b00           1   -   -   -   -   -    -    -    -    -               -    -    -    -    -    -    -    -    Covered     
0   1   1   2'b00           0   -   -   -   -   -    -    -    -    -               -    -    -    -    -    -    -    -    Not Covered 
0   1   1   2'b00           -   1   -   -   -   -    -    -    -    -               -    -    -    -    -    -    -    -    Covered     
0   1   1   2'b00           -   0   -   -   -   -    -    -    -    -               -    -    -    -    -    -    -    -    Covered     
0   1   1   2'b01           -   -   1   -   -   -    -    -    -    -               -    -    -    -    -    -    -    -    Not Covered 
0   1   1   2'b01           -   -   0   -   -   -    -    -    -    -               -    -    -    -    -    -    -    -    Covered     
0   1   1   2'b01           -   -   -   1   -   -    -    -    -    -               -    -    -    -    -    -    -    -    Not Covered 
0   1   1   2'b01           -   -   -   0   -   -    -    -    -    -               -    -    -    -    -    -    -    -    Covered     
0   1   1   2'b10           -   -   -   -   1   -    -    -    -    -               -    -    -    -    -    -    -    -    Covered     
0   1   1   2'b10           -   -   -   -   0   -    -    -    -    -               -    -    -    -    -    -    -    -    Not Covered 
0   1   1   2'b10           -   -   -   -   -   1    -    -    -    -               -    -    -    -    -    -    -    -    Covered     
0   1   1   2'b10           -   -   -   -   -   0    -    -    -    -               -    -    -    -    -    -    -    -    Covered     
0   1   1   2'b11           -   -   -   -   -   -    1    -    -    -               -    -    -    -    -    -    -    -    Covered     
0   1   1   2'b11           -   -   -   -   -   -    0    -    -    -               -    -    -    -    -    -    -    -    Not Covered 
0   1   1   2'b11           -   -   -   -   -   -    -    1    -    -               -    -    -    -    -    -    -    -    Covered     
0   1   1   2'b11           -   -   -   -   -   -    -    0    -    -               -    -    -    -    -    -    -    -    Covered     
0   1   1   MISSING_DEFAULT -   -   -   -   -   -    -    -    -    -               -    -    -    -    -    -    -    -    Not Covered 
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b00           1    -    -    -    -    -    -    -    Covered     
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b00           0    -    -    -    -    -    -    -    Not Covered 
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b00           -    1    -    -    -    -    -    -    Covered     
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b00           -    0    -    -    -    -    -    -    Covered     
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b01           -    -    1    -    -    -    -    -    Covered     
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b01           -    -    0    -    -    -    -    -    Covered     
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b01           -    -    -    1    -    -    -    -    Covered     
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b01           -    -    -    0    -    -    -    -    Covered     
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b10           -    -    -    -    1    -    -    -    Covered     
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b10           -    -    -    -    0    -    -    -    Not Covered 
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b10           -    -    -    -    -    1    -    -    Covered     
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b10           -    -    -    -    -    0    -    -    Covered     
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b11           -    -    -    -    -    -    1    -    Covered     
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b11           -    -    -    -    -    -    0    -    Covered     
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b11           -    -    -    -    -    -    -    1    Covered     
0   1   0   -               -   -   -   -   -   -    -    -    1    2'b11           -    -    -    -    -    -    -    0    Covered     
0   1   0   -               -   -   -   -   -   -    -    -    1    MISSING_DEFAULT -    -    -    -    -    -    -    -    Not Covered 
0   1   0   -               -   -   -   -   -   -    -    -    0    -               -    -    -    -    -    -    -    -    Not Covered 
0   0   -   -               -   -   -   -   -   -    -    -    -    -               -    -    -    -    -    -    -    -    Covered     


-------------------------------------------------------------------------------
===============================================================================
Module Instance : tb.dut
===============================================================================

Instance :

SCORE  LINE   TOGGLE BRANCH 
 89.64  96.00  98.57  74.36 


Instance's subtree :

SCORE  LINE   TOGGLE BRANCH 
 89.64  96.00  98.57  74.36 


Module : 

SCORE  LINE   TOGGLE BRANCH NAME 
 89.64  96.00  98.57  74.36 alu  


Parent : 

SCORE  LINE   TOGGLE BRANCH NAME 
100.00 100.00 --     --     tb   


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
===============================================================================
Module : alu_ifc
===============================================================================
SCORE  LINE   TOGGLE BRANCH 
 98.57 --      98.57 --     

Source File(s) : 

/home/ICer/omnia/iti/FINAL_ALU_PROJECT/alu_ifc.sv

Module self-instances :

SCORE  LINE   TOGGLE BRANCH NAME   
 98.57 --      98.57 --     tb.ifc 



-------------------------------------------------------------------------------
Toggle Coverage for Module : alu_ifc
                Total Covered Percent 
Totals          12    11      91.67   
Total Bits      70    69      98.57   
Total Bits 0->1 35    35      100.00  
Total Bits 1->0 35    34      97.14   

                              
Signals          12 11 91.67  
Signal Bits      70 69 98.57  
Signal Bits 0->1 35 35 100.00 
Signal Bits 1->0 35 34 97.14  

Signal Details
              Toggle Toggle 1->0 Toggle 0->1 
alu_clk       Yes    Yes         Yes         
rst_n         No     No          Yes         
alu_irq_clr   Yes    Yes         Yes         
alu_enable    Yes    Yes         Yes         
alu_enable_a  Yes    Yes         Yes         
alu_enable_b  Yes    Yes         Yes         
alu_op_a[1:0] Yes    Yes         Yes         
alu_op_b[1:0] Yes    Yes         Yes         
alu_in_a[7:0] Yes    Yes         Yes         
alu_in_b[7:0] Yes    Yes         Yes         
alu_out[7:0]  Yes    Yes         Yes         
alu_irq       Yes    Yes         Yes         


-------------------------------------------------------------------------------
===============================================================================
Module Instance : tb.ifc
===============================================================================

Instance :

SCORE  LINE   TOGGLE BRANCH 
 98.57 --      98.57 --     


Instance's subtree :

SCORE  LINE   TOGGLE BRANCH 
 98.57 --      98.57 --     


Module : 

SCORE  LINE   TOGGLE BRANCH NAME    
 98.57 --      98.57 --     alu_ifc 


Parent : 

SCORE  LINE   TOGGLE BRANCH NAME 
100.00 100.00 --     --     tb   


Subtrees :


no children
----------------


-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
===============================================================================
Module : tb
===============================================================================
SCORE  LINE   TOGGLE BRANCH 
100.00 100.00 --     --     

Source File(s) : 

/home/ICer/omnia/iti/FINAL_ALU_PROJECT/testbench.sv

Module self-instances :

SCORE  LINE   TOGGLE BRANCH NAME 
100.00 100.00 --     --     tb   



-------------------------------------------------------------------------------
Line Coverage for Module : tb

             Line No.   Total   Covered  Percent
TOTAL                        9        9   100.00
INITIAL            15        4        4   100.00
INITIAL            22        3        3   100.00
INITIAL            29        2        2   100.00

14                        initial begin
15         1/1             ifc.alu_clk<=0;
16         3/3              forever#10 ifc.alu_clk<=~ifc.alu_clk;
17                        end
18                      
19                       alu dut( ifc.alu_clk,ifc.rst_n,ifc.alu_irq_clr,ifc.alu_enable,ifc.alu_enable_a,ifc.alu_enable_b,  ifc.alu_op_a,ifc.alu_op_b,ifc.alu_in_a,ifc.alu_in_b,ifc.alu_out,ifc.alu_irq);
20                      
21                        initial begin
22         1/1              env=new(ifc);
23         1/1              env.gen.num_repetition=1500;
24         1/1              env.run();
25                        end
26                       
27                       
28                       initial begin
29         1/1              $dumpfile("test.vcd");
30         1/1              $dumpvars;

-------------------------------------------------------------------------------
===============================================================================
Module Instance : tb
===============================================================================

Instance :

SCORE  LINE   TOGGLE BRANCH 
100.00 100.00 --     --     


Instance's subtree :

SCORE  LINE   TOGGLE BRANCH 
 89.85  96.61  98.57  74.36 


Module : 

SCORE  LINE   TOGGLE BRANCH NAME 
100.00 100.00 --     --     tb   


Parent : 

none
----------------


Subtrees :

SCORE  LINE   TOGGLE BRANCH NAME 
 89.64  96.00  98.57  74.36 dut  
 98.57 --      98.57 --     ifc  



-------------------------------------------------------------------------------
Since this is the module's only instance, the coverage report is the same as for the module.
